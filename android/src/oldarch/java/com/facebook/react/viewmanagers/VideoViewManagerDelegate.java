/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;

public class VideoViewManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & VideoViewManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public VideoViewManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "src":
        mViewManager.setSrc(view, (ReadableMap) value);
        break;
      case "adTagUrl":
        mViewManager.setAdTagUrl(view, value == null ? null : (String) value);
        break;
      case "allowsExternalPlayback":
        mViewManager.setAllowsExternalPlayback(view, value == null ? false : (boolean) value);
        break;
      case "disableFocus":
        mViewManager.setDisableFocus(view, value == null ? false : (boolean) value);
        break;
      case "maxBitRate":
        mViewManager.setMaxBitRate(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "resizeMode":
        mViewManager.setResizeMode(view, value == null ? "none" : (String) value);
        break;
      case "repeat":
        mViewManager.setRepeat(view, value == null ? false : (boolean) value);
        break;
      case "automaticallyWaitsToMinimizeStalling":
        mViewManager.setAutomaticallyWaitsToMinimizeStalling(view, value == null ? false : (boolean) value);
        break;
      case "shutterColor":
        mViewManager.setShutterColor(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "audioOutput":
        mViewManager.setAudioOutput(view, value == null ? "speaker" : (String) value);
        break;
      case "textTracks":
        mViewManager.setTextTracks(view, (ReadableArray) value);
        break;
      case "selectedTextTrack":
        mViewManager.setSelectedTextTrack(view, (ReadableMap) value);
        break;
      case "selectedAudioTrack":
        mViewManager.setSelectedAudioTrack(view, (ReadableMap) value);
        break;
      case "selectedVideoTrack":
        mViewManager.setSelectedVideoTrack(view, (ReadableMap) value);
        break;
      case "paused":
        mViewManager.setPaused(view, value == null ? false : (boolean) value);
        break;
      case "muted":
        mViewManager.setMuted(view, value == null ? false : (boolean) value);
        break;
      case "controls":
        mViewManager.setControls(view, value == null ? false : (boolean) value);
        break;
      case "filter":
        mViewManager.setFilter(view, value == null ? "" : (String) value);
        break;
      case "filterEnabled":
        mViewManager.setFilterEnabled(view, value == null ? false : (boolean) value);
        break;
      case "volume":
        mViewManager.setVolume(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "playInBackground":
        mViewManager.setPlayInBackground(view, value == null ? false : (boolean) value);
        break;
      case "preventsDisplaySleepDuringVideoPlayback":
        mViewManager.setPreventsDisplaySleepDuringVideoPlayback(view, value == null ? false : (boolean) value);
        break;
      case "preferredForwardBufferDuration":
        mViewManager.setPreferredForwardBufferDuration(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "playWhenInactive":
        mViewManager.setPlayWhenInactive(view, value == null ? false : (boolean) value);
        break;
      case "pictureInPicture":
        mViewManager.setPictureInPicture(view, value == null ? false : (boolean) value);
        break;
      case "ignoreSilentSwitch":
        mViewManager.setIgnoreSilentSwitch(view, value == null ? "inherit" : (String) value);
        break;
      case "mixWithOthers":
        mViewManager.setMixWithOthers(view, value == null ? "inherit" : (String) value);
        break;
      case "rate":
        mViewManager.setRate(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "fullscreen":
        mViewManager.setFullscreen(view, value == null ? false : (boolean) value);
        break;
      case "fullscreenAutorotate":
        mViewManager.setFullscreenAutorotate(view, value == null ? false : (boolean) value);
        break;
      case "fullscreenOrientation":
        mViewManager.setFullscreenOrientation(view, value == null ? "all" : (String) value);
        break;
      case "progressUpdateInterval":
        mViewManager.setProgressUpdateInterval(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "restoreUserInterfaceForPIPStopCompletionHandler":
        mViewManager.setRestoreUserInterfaceForPIPStopCompletionHandler(view, value == null ? false : (boolean) value);
        break;
      case "localSourceEncryptionKeyScheme":
        mViewManager.setLocalSourceEncryptionKeyScheme(view, value == null ? null : (String) value);
        break;
      case "debug":
        mViewManager.setDebug(view, (ReadableMap) value);
        break;
      case "showNotificationControls":
        mViewManager.setShowNotificationControls(view, value == null ? false : (boolean) value);
        break;
      case "bufferConfig":
        mViewManager.setBufferConfig(view, (ReadableMap) value);
        break;
      case "contentStartTime":
        mViewManager.setContentStartTime(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "currentPlaybackTime":
        mViewManager.setCurrentPlaybackTime(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "disableDisconnectError":
        mViewManager.setDisableDisconnectError(view, value == null ? false : (boolean) value);
        break;
      case "focusable":
        mViewManager.setFocusable(view, value == null ? false : (boolean) value);
        break;
      case "hideShutterView":
        mViewManager.setHideShutterView(view, value == null ? false : (boolean) value);
        break;
      case "minLoadRetryCount":
        mViewManager.setMinLoadRetryCount(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "reportBandwidth":
        mViewManager.setReportBandwidth(view, value == null ? false : (boolean) value);
        break;
      case "subtitleStyle":
        mViewManager.setSubtitleStyle(view, (ReadableMap) value);
        break;
      case "viewType":
        mViewManager.setViewType(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "bufferingStrategy":
        mViewManager.setBufferingStrategy(view, value == null ? "Default" : (String) value);
        break;
      case "controlsStyles":
        mViewManager.setControlsStyles(view, (ReadableMap) value);
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }

  @Override
  public void receiveCommand(T view, String commandName, ReadableArray args) {
    switch (commandName) {
      case "seekCmd":
        mViewManager.seekCmd(view, (float) args.getDouble(0), (float) args.getDouble(1));
        break;
      case "setPlayerPauseStateCmd":
        mViewManager.setPlayerPauseStateCmd(view, args.getBoolean(0));
        break;
      case "setVolumeCmd":
        mViewManager.setVolumeCmd(view, (float) args.getDouble(0));
        break;
      case "setFullScreenCmd":
        mViewManager.setFullScreenCmd(view, args.getBoolean(0));
        break;
      case "setLicenseResultCmd":
        mViewManager.setLicenseResultCmd(view, args.getString(0), args.getString(1));
        break;
      case "setLicenseResultErrorCmd":
        mViewManager.setLicenseResultErrorCmd(view, args.getString(0), args.getString(1));
        break;
    }
  }
}
